{"name":"Jvm-json-benchmark","tagline":"Performance benchmark suite that compares data-binding (JSON<->POJO) performance of Java JSON libraries. Uses Japex benchmark framework for running tests and visualizing results.","body":"# Benchmark for comparing JSON performance on Java platform\r\n\r\nThis project contains benchmark suite for comparing performance of JSON-to/from-POJOs\r\ndata binding, using various Java JSON libraries.\r\n\r\n## Basics\r\n\r\nLibraries included are mostly ones that can do fully automatic data-binding; but in some\r\ncases we may also include ones that only implement Tree-based processing, in which case\r\nadditional manual coding is required.\r\nWe may also include tree-based variants of data-binding - capable libraries in cases where that makes sense.\r\nIn all cases we indicate processing-module uses (which indicates level-of-effort for using\r\nlibrary for data-binding use cases).\r\n\r\n## Test framework\r\n\r\nTests use Japex, since it\r\n\r\n1. Is designed for full benchmark runs (not just micro-benchmarks), and\r\n2. It provides full JVM isolation between tests, to avoid Hot-Spot problems wrt multiple competing implementations\r\n\r\nSome attempts were made to use Caliper, which has some promising features; but in the end\r\nJapex proved bit more mature for this specific use case.\r\nBut we may try out other frameworks in future.\r\n\r\n## Results\r\n\r\nNone published yet -- Stay Tuned!\r\n\r\n## Libraries included\r\n\r\n### Fastjson\r\n\r\n* Home page: https://github.com/alibaba/fastjson\r\n* Version tested: 1.1.30\r\n\r\nTested with default settings; except configured NOT to check for cyclic dependencies (as that\r\nadds overhead).\r\nLibrary apparently can not take streaming input, so code has to read all content in; this\r\nis done using simple copy (which gives slight advantage compared to having to do it the\r\nusual way); but should not change results drastically.\r\n\r\n### Flex-JSON\r\n\r\n* Home page: http://sourceforge.net/projects/flexjson\r\n* Version tested: 2.1\r\n\r\nNOTE: version 3.0 appears to be available, but I could not make it work.\r\n2.1 appears to be the official publicly available version.\r\n\r\n### Genson\r\n\r\n* Home page: http://code.google.com/p/genson/\r\n* Version tested: 0.94\r\n\r\nSimilar to GSON, need to use JDK `InputStreamReader`. In addition, output only as `String`, which\r\nis then written using `OutputStreamWriter`.\r\n\r\n### GSON\r\n\r\n* Home page: http://code.google.com/p/google-gson/)\r\n* Version tested: 2.2\r\n\r\nTested in basic data-binding mode, with default configuration.\r\n\r\nGSON does not take `InputStream` or `OutputStream`,\r\nso input is read using standard JDK `InputStreamReader` (with UTF-8)\r\nand output `OutputStreamWriter`.\r\n\r\n### Jackson\r\n\r\n* Home page: https://github.com/FasterXML/jackson\r\n* Version tested: 2.2\r\n\r\nTested in basic data-binding mode, with default configuration.\r\n\r\nNote that tests does NOT use [Afterburner](https://github.com/FasterXML/jackson-module-afterburner) module (which could increase speed by 30-40%)\r\nas the intent is to compare default implementations, configurations.\r\nA separate test driver may be added in future to test such variation.\r\n\r\n### JSON-tools\r\n\r\n* Home page: http://jsontools.berlios.de/\r\n* Version tested: 1.7\r\n\r\nSeems to require two-phase process for reading (with `JSONParser` from `InputStream`, into `JSONValue`;\r\nthen mapped using `JSONMapper`.\r\nSimilarly writing has to be done using an intermediate `String` -- inefficient, but that's what API expects.\r\n\r\n## Libraries not included\r\n\r\nFollowing libraries were considered for inclusion, but had to be excluded for some reason.\r\n\r\n### Json-lib\r\n\r\n* Home page: http://json-lib.sourceforge.net\r\n* Version: 2.4\r\n\r\nThis library is sort-of kind-of capable of data-binding, but requires lots of additional configuration and\r\nregistration of types (see `JsonLibJsonDatabind.java` of [JVM-serializers](https://github.com/eishay/jvm-serializers)\r\nfor details); so it seems more hassle than worth.\r\nPerformance, as per jvm-serializers, also does not rank anywhere near top of Java JSON libraries, so this does not seem like a big omission.\r\n\r\n### Json-smart\r\n\r\n* Home page: http://code.google.com/p/json-smart/\r\n* Version tested: 2.0-RC2\r\n\r\nSimply, does not work. Although I found a way that should allow Bean conversions, code just mysteriously\r\nfails with a class-loading error.\r\n\r\nIf anyone can suggest a fix or work-around, I will be happy to include this in tests as well.\r\nResults from sources other than project home page suggest not-so-stellar performance (like jvm-serializers).\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}